module VerifyExamples.Tracery.Step0 exposing (..)

-- This file got generated by [elm-verify-examples](https://github.com/stoeffel/elm-verify-examples).
-- Please don't modify this file by hand!

import Test
import Expect

import Tracery exposing (..)
import Tracery.Grammar exposing (Grammar)
import Result.Extra
import Random exposing (Generator)
import Json.Decode



input : Result Json.Decode.Error Grammar
input =
    """
    { "origin": ["A #animal#"]
    , "animal":
    [ "cat, looking at a #animal#"
    , "bird."
    ]
    }
    """
        |> Tracery.fromJson
andThenToString : ({ variable : String } -> String) -> Int -> (Grammar -> Generator Grammar) -> Result Json.Decode.Error Grammar -> String
andThenToString fun seed gen =
    Result.Extra.unpack
        Json.Decode.errorToString
        (\grammar ->
            Random.step (gen grammar) (Random.initialSeed seed)
                |> Tuple.first
                |> toString fun
        )



spec0 : Test.Test
spec0 =
    Test.test "#step: \n\n    input\n    |> andThenToString (\\{variable} -> \"dog.\") 42\n        (\\g -> g\n            |> Tracery.step\n            |> Random.andThen Tracery.step\n            |> Random.andThen Tracery.step\n        )\n    --> \"A cat, looking at a dog.\"" <|
        \() ->
            Expect.equal
                (
                input
                |> andThenToString (\{variable} -> "dog.") 42
                    (\g -> g
                        |> Tracery.step
                        |> Random.andThen Tracery.step
                        |> Random.andThen Tracery.step
                    )
                )
                (
                "A cat, looking at a dog."
                )