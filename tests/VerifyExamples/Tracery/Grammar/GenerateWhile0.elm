module VerifyExamples.Tracery.Grammar.GenerateWhile0 exposing (..)

-- This file got generated by [elm-verify-examples](https://github.com/stoeffel/elm-verify-examples).
-- Please don't modify this file by hand!

import Test
import Expect

import Tracery.Grammar exposing (..)
import Set
import Tracery.Syntax exposing (Definition(..), Expression(..))
import Result.Extra
import Random exposing (Generator)
import Json.Decode
import Dict



input : Grammar
input =
    [ ( "origin", Choose [ [ Value "A ", Variable "animal" ] ] )
    , ( "animal"
      , Choose
            [ [ Value "cat, looking at a ", Variable "animal" ]
            , [ Value "bird." ]
            ]
      )
    ]
        |> Dict.fromList
        |> fromDefinitions
andThenToString : ({ variable : String } -> String) -> Int -> (Grammar -> Generator Grammar) -> Grammar -> String
andThenToString fun seed gen grammar =
    Random.step (gen grammar) (Random.initialSeed seed)
        |> Tuple.first
        |> toString fun



spec0 : Test.Test
spec0 =
    Test.test "#generateWhile: \n\n    input\n    |> andThenToString (\\{variable} -> \"dog.\") 42 (generateWhile (\\_ -> True) (noRecursionStrategy (Set.fromList [\"animal\"])))\n    --> \"A bird.\"" <|
        \() ->
            Expect.equal
                (
                input
                |> andThenToString (\{variable} -> "dog.") 42 (generateWhile (\_ -> True) (noRecursionStrategy (Set.fromList ["animal"])))
                )
                (
                "A bird."
                )